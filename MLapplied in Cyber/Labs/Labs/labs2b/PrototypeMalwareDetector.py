import logging
import os

from ApproxAgglomerativeClustering import ApproxAgglomerativeClustering
# Set logging for this module
logger = logging.getLogger(os.path.splitext(os.path.basename(__file__))[0])
logging.basicConfig(level=logging.INFO)
logger.setLevel(logging.INFO)

BINARY_FILE_PATH = "disassembly_protos/"
SIMILARITY_THRESHOLD = .85

class PrototypeMalwareDetector(object):

    def __init__(self, binaries_file_path, similarity_threshold):

        self._binaries_file_path = binaries_file_path

        self._similarity_threshold = similarity_threshold


    def perform_detection(self):

        # Initializing the agglomerative clustering object
        approx_clustering = ApproxAgglomerativeClustering(1-self._similarity_threshold)


        # Load the test dataset
        approx_clustering.load_binaries_from_directory(BINARY_FILE_PATH)

        # Perform the clustering
        approx_clustering.perform_clustering()

        # Get the cluster list
        cluster_list = approx_clustering.cluster_list
        # ===========================  HINT 1 ======================================

        """
        Hint 1: The below is a  example for code to perform the logging of a detected malware
                This example code should be commented out after you've successfully implemented the detection logic 
                The binary that is referenced in this example may or may not be malware
        """
        # cluster = cluster_list[0]        
        # cluster_node = (cluster.cluster_node_list[0])        
        # logger.info("(Malware Detected) Name:{}  Sha-256 Hash:{}".format(cluster_node.name,cluster_node.binary_sha256_hash))
        
        # ===========================END HINT 1 ===================================

        num_malware = 0

        # logger.warning("@todo: Implement malware detection logic here")
        """
         Notes:  You will need to iterate through the cluster_list to determine which clusters meet the requirements 
                 specified in the lab for what "malware" is defined as
        """
        # from ApproxAgglomerativeClustering import ClusterNode

        for cluster in cluster_list:
            if(len(cluster.cluster_node_list)<2):
                cluster_node = (cluster.cluster_node_list[0])
                num_malware+=1
                logger.info("(Malware Detected) Name:{}  Sha-256 Hash:{}".format(cluster_node.name,cluster_node.binary_sha256_hash))
        

        logger.info("total number of malware:{}".format(num_malware))


def main():

    logger.info("****** Begin Prototype Malware Detector ************")

    prototype_malware_detect = PrototypeMalwareDetector(BINARY_FILE_PATH, SIMILARITY_THRESHOLD)

    prototype_malware_detect.perform_detection()

    logger.info("*******END Prototype Malware Detector**************")


if __name__ == "__main__":
    main()